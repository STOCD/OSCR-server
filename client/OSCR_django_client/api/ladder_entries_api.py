# coding: utf-8

"""
    OSCR API

    OSCR API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from OSCR_django_client.models.ladder_entries_list200_response import LadderEntriesList200Response
from OSCR_django_client.models.ladder_entry import LadderEntry

from OSCR_django_client.api_client import ApiClient, RequestSerialized
from OSCR_django_client.api_response import ApiResponse
from OSCR_django_client.rest import RESTResponseType


class LadderEntriesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def ladder_entries_list(
        self,
        player: Annotated[Optional[StrictStr], Field(description="player")] = None,
        player__iexact: Annotated[Optional[StrictStr], Field(description="player__iexact")] = None,
        player__contains: Annotated[Optional[StrictStr], Field(description="player__contains")] = None,
        player__icontains: Annotated[Optional[StrictStr], Field(description="player__icontains")] = None,
        player__istartswith: Annotated[Optional[StrictStr], Field(description="player__istartswith")] = None,
        player__startswith: Annotated[Optional[StrictStr], Field(description="player__startswith")] = None,
        player__endswith: Annotated[Optional[StrictStr], Field(description="player__endswith")] = None,
        player__iendswith: Annotated[Optional[StrictStr], Field(description="player__iendswith")] = None,
        player__iregex: Annotated[Optional[StrictStr], Field(description="player__iregex")] = None,
        player__regex: Annotated[Optional[StrictStr], Field(description="player__regex")] = None,
        ladder: Annotated[Optional[StrictStr], Field(description="ladder")] = None,
        ladder__name: Annotated[Optional[StrictStr], Field(description="ladder__name")] = None,
        ladder__name__iexact: Annotated[Optional[StrictStr], Field(description="ladder__name__iexact")] = None,
        ladder__name__contains: Annotated[Optional[StrictStr], Field(description="ladder__name__contains")] = None,
        ladder__name__icontains: Annotated[Optional[StrictStr], Field(description="ladder__name__icontains")] = None,
        ladder__name__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__name__istartswith")] = None,
        ladder__name__startswith: Annotated[Optional[StrictStr], Field(description="ladder__name__startswith")] = None,
        ladder__name__endswith: Annotated[Optional[StrictStr], Field(description="ladder__name__endswith")] = None,
        ladder__name__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__name__iendswith")] = None,
        ladder__name__iregex: Annotated[Optional[StrictStr], Field(description="ladder__name__iregex")] = None,
        ladder__name__regex: Annotated[Optional[StrictStr], Field(description="ladder__name__regex")] = None,
        ladder__difficulty: Annotated[Optional[StrictStr], Field(description="ladder__difficulty")] = None,
        ladder__difficulty__iexact: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iexact")] = None,
        ladder__difficulty__contains: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__contains")] = None,
        ladder__difficulty__icontains: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__icontains")] = None,
        ladder__difficulty__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__istartswith")] = None,
        ladder__difficulty__startswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__startswith")] = None,
        ladder__difficulty__endswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__endswith")] = None,
        ladder__difficulty__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iendswith")] = None,
        ladder__difficulty__iregex: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iregex")] = None,
        ladder__difficulty__regex: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__regex")] = None,
        ladder__variant__name: Annotated[Optional[StrictStr], Field(description="ladder__variant__name")] = None,
        ladder__variant__name__iexact: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iexact")] = None,
        ladder__variant__name__contains: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__contains")] = None,
        ladder__variant__name__icontains: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__icontains")] = None,
        ladder__variant__name__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__istartswith")] = None,
        ladder__variant__name__startswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__startswith")] = None,
        ladder__variant__name__endswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__endswith")] = None,
        ladder__variant__name__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iendswith")] = None,
        ladder__variant__name__iregex: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iregex")] = None,
        ladder__variant__name__regex: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__regex")] = None,
        ladder__is_solo: Annotated[Optional[StrictStr], Field(description="ladder__is_solo")] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LadderEntriesList200Response:
        """ladder_entries_list

        LadderEntry API

        :param player: player
        :type player: str
        :param player__iexact: player__iexact
        :type player__iexact: str
        :param player__contains: player__contains
        :type player__contains: str
        :param player__icontains: player__icontains
        :type player__icontains: str
        :param player__istartswith: player__istartswith
        :type player__istartswith: str
        :param player__startswith: player__startswith
        :type player__startswith: str
        :param player__endswith: player__endswith
        :type player__endswith: str
        :param player__iendswith: player__iendswith
        :type player__iendswith: str
        :param player__iregex: player__iregex
        :type player__iregex: str
        :param player__regex: player__regex
        :type player__regex: str
        :param ladder: ladder
        :type ladder: str
        :param ladder__name: ladder__name
        :type ladder__name: str
        :param ladder__name__iexact: ladder__name__iexact
        :type ladder__name__iexact: str
        :param ladder__name__contains: ladder__name__contains
        :type ladder__name__contains: str
        :param ladder__name__icontains: ladder__name__icontains
        :type ladder__name__icontains: str
        :param ladder__name__istartswith: ladder__name__istartswith
        :type ladder__name__istartswith: str
        :param ladder__name__startswith: ladder__name__startswith
        :type ladder__name__startswith: str
        :param ladder__name__endswith: ladder__name__endswith
        :type ladder__name__endswith: str
        :param ladder__name__iendswith: ladder__name__iendswith
        :type ladder__name__iendswith: str
        :param ladder__name__iregex: ladder__name__iregex
        :type ladder__name__iregex: str
        :param ladder__name__regex: ladder__name__regex
        :type ladder__name__regex: str
        :param ladder__difficulty: ladder__difficulty
        :type ladder__difficulty: str
        :param ladder__difficulty__iexact: ladder__difficulty__iexact
        :type ladder__difficulty__iexact: str
        :param ladder__difficulty__contains: ladder__difficulty__contains
        :type ladder__difficulty__contains: str
        :param ladder__difficulty__icontains: ladder__difficulty__icontains
        :type ladder__difficulty__icontains: str
        :param ladder__difficulty__istartswith: ladder__difficulty__istartswith
        :type ladder__difficulty__istartswith: str
        :param ladder__difficulty__startswith: ladder__difficulty__startswith
        :type ladder__difficulty__startswith: str
        :param ladder__difficulty__endswith: ladder__difficulty__endswith
        :type ladder__difficulty__endswith: str
        :param ladder__difficulty__iendswith: ladder__difficulty__iendswith
        :type ladder__difficulty__iendswith: str
        :param ladder__difficulty__iregex: ladder__difficulty__iregex
        :type ladder__difficulty__iregex: str
        :param ladder__difficulty__regex: ladder__difficulty__regex
        :type ladder__difficulty__regex: str
        :param ladder__variant__name: ladder__variant__name
        :type ladder__variant__name: str
        :param ladder__variant__name__iexact: ladder__variant__name__iexact
        :type ladder__variant__name__iexact: str
        :param ladder__variant__name__contains: ladder__variant__name__contains
        :type ladder__variant__name__contains: str
        :param ladder__variant__name__icontains: ladder__variant__name__icontains
        :type ladder__variant__name__icontains: str
        :param ladder__variant__name__istartswith: ladder__variant__name__istartswith
        :type ladder__variant__name__istartswith: str
        :param ladder__variant__name__startswith: ladder__variant__name__startswith
        :type ladder__variant__name__startswith: str
        :param ladder__variant__name__endswith: ladder__variant__name__endswith
        :type ladder__variant__name__endswith: str
        :param ladder__variant__name__iendswith: ladder__variant__name__iendswith
        :type ladder__variant__name__iendswith: str
        :param ladder__variant__name__iregex: ladder__variant__name__iregex
        :type ladder__variant__name__iregex: str
        :param ladder__variant__name__regex: ladder__variant__name__regex
        :type ladder__variant__name__regex: str
        :param ladder__is_solo: ladder__is_solo
        :type ladder__is_solo: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ladder_entries_list_serialize(
            player=player,
            player__iexact=player__iexact,
            player__contains=player__contains,
            player__icontains=player__icontains,
            player__istartswith=player__istartswith,
            player__startswith=player__startswith,
            player__endswith=player__endswith,
            player__iendswith=player__iendswith,
            player__iregex=player__iregex,
            player__regex=player__regex,
            ladder=ladder,
            ladder__name=ladder__name,
            ladder__name__iexact=ladder__name__iexact,
            ladder__name__contains=ladder__name__contains,
            ladder__name__icontains=ladder__name__icontains,
            ladder__name__istartswith=ladder__name__istartswith,
            ladder__name__startswith=ladder__name__startswith,
            ladder__name__endswith=ladder__name__endswith,
            ladder__name__iendswith=ladder__name__iendswith,
            ladder__name__iregex=ladder__name__iregex,
            ladder__name__regex=ladder__name__regex,
            ladder__difficulty=ladder__difficulty,
            ladder__difficulty__iexact=ladder__difficulty__iexact,
            ladder__difficulty__contains=ladder__difficulty__contains,
            ladder__difficulty__icontains=ladder__difficulty__icontains,
            ladder__difficulty__istartswith=ladder__difficulty__istartswith,
            ladder__difficulty__startswith=ladder__difficulty__startswith,
            ladder__difficulty__endswith=ladder__difficulty__endswith,
            ladder__difficulty__iendswith=ladder__difficulty__iendswith,
            ladder__difficulty__iregex=ladder__difficulty__iregex,
            ladder__difficulty__regex=ladder__difficulty__regex,
            ladder__variant__name=ladder__variant__name,
            ladder__variant__name__iexact=ladder__variant__name__iexact,
            ladder__variant__name__contains=ladder__variant__name__contains,
            ladder__variant__name__icontains=ladder__variant__name__icontains,
            ladder__variant__name__istartswith=ladder__variant__name__istartswith,
            ladder__variant__name__startswith=ladder__variant__name__startswith,
            ladder__variant__name__endswith=ladder__variant__name__endswith,
            ladder__variant__name__iendswith=ladder__variant__name__iendswith,
            ladder__variant__name__iregex=ladder__variant__name__iregex,
            ladder__variant__name__regex=ladder__variant__name__regex,
            ladder__is_solo=ladder__is_solo,
            ordering=ordering,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LadderEntriesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ladder_entries_list_with_http_info(
        self,
        player: Annotated[Optional[StrictStr], Field(description="player")] = None,
        player__iexact: Annotated[Optional[StrictStr], Field(description="player__iexact")] = None,
        player__contains: Annotated[Optional[StrictStr], Field(description="player__contains")] = None,
        player__icontains: Annotated[Optional[StrictStr], Field(description="player__icontains")] = None,
        player__istartswith: Annotated[Optional[StrictStr], Field(description="player__istartswith")] = None,
        player__startswith: Annotated[Optional[StrictStr], Field(description="player__startswith")] = None,
        player__endswith: Annotated[Optional[StrictStr], Field(description="player__endswith")] = None,
        player__iendswith: Annotated[Optional[StrictStr], Field(description="player__iendswith")] = None,
        player__iregex: Annotated[Optional[StrictStr], Field(description="player__iregex")] = None,
        player__regex: Annotated[Optional[StrictStr], Field(description="player__regex")] = None,
        ladder: Annotated[Optional[StrictStr], Field(description="ladder")] = None,
        ladder__name: Annotated[Optional[StrictStr], Field(description="ladder__name")] = None,
        ladder__name__iexact: Annotated[Optional[StrictStr], Field(description="ladder__name__iexact")] = None,
        ladder__name__contains: Annotated[Optional[StrictStr], Field(description="ladder__name__contains")] = None,
        ladder__name__icontains: Annotated[Optional[StrictStr], Field(description="ladder__name__icontains")] = None,
        ladder__name__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__name__istartswith")] = None,
        ladder__name__startswith: Annotated[Optional[StrictStr], Field(description="ladder__name__startswith")] = None,
        ladder__name__endswith: Annotated[Optional[StrictStr], Field(description="ladder__name__endswith")] = None,
        ladder__name__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__name__iendswith")] = None,
        ladder__name__iregex: Annotated[Optional[StrictStr], Field(description="ladder__name__iregex")] = None,
        ladder__name__regex: Annotated[Optional[StrictStr], Field(description="ladder__name__regex")] = None,
        ladder__difficulty: Annotated[Optional[StrictStr], Field(description="ladder__difficulty")] = None,
        ladder__difficulty__iexact: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iexact")] = None,
        ladder__difficulty__contains: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__contains")] = None,
        ladder__difficulty__icontains: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__icontains")] = None,
        ladder__difficulty__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__istartswith")] = None,
        ladder__difficulty__startswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__startswith")] = None,
        ladder__difficulty__endswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__endswith")] = None,
        ladder__difficulty__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iendswith")] = None,
        ladder__difficulty__iregex: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iregex")] = None,
        ladder__difficulty__regex: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__regex")] = None,
        ladder__variant__name: Annotated[Optional[StrictStr], Field(description="ladder__variant__name")] = None,
        ladder__variant__name__iexact: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iexact")] = None,
        ladder__variant__name__contains: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__contains")] = None,
        ladder__variant__name__icontains: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__icontains")] = None,
        ladder__variant__name__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__istartswith")] = None,
        ladder__variant__name__startswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__startswith")] = None,
        ladder__variant__name__endswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__endswith")] = None,
        ladder__variant__name__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iendswith")] = None,
        ladder__variant__name__iregex: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iregex")] = None,
        ladder__variant__name__regex: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__regex")] = None,
        ladder__is_solo: Annotated[Optional[StrictStr], Field(description="ladder__is_solo")] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LadderEntriesList200Response]:
        """ladder_entries_list

        LadderEntry API

        :param player: player
        :type player: str
        :param player__iexact: player__iexact
        :type player__iexact: str
        :param player__contains: player__contains
        :type player__contains: str
        :param player__icontains: player__icontains
        :type player__icontains: str
        :param player__istartswith: player__istartswith
        :type player__istartswith: str
        :param player__startswith: player__startswith
        :type player__startswith: str
        :param player__endswith: player__endswith
        :type player__endswith: str
        :param player__iendswith: player__iendswith
        :type player__iendswith: str
        :param player__iregex: player__iregex
        :type player__iregex: str
        :param player__regex: player__regex
        :type player__regex: str
        :param ladder: ladder
        :type ladder: str
        :param ladder__name: ladder__name
        :type ladder__name: str
        :param ladder__name__iexact: ladder__name__iexact
        :type ladder__name__iexact: str
        :param ladder__name__contains: ladder__name__contains
        :type ladder__name__contains: str
        :param ladder__name__icontains: ladder__name__icontains
        :type ladder__name__icontains: str
        :param ladder__name__istartswith: ladder__name__istartswith
        :type ladder__name__istartswith: str
        :param ladder__name__startswith: ladder__name__startswith
        :type ladder__name__startswith: str
        :param ladder__name__endswith: ladder__name__endswith
        :type ladder__name__endswith: str
        :param ladder__name__iendswith: ladder__name__iendswith
        :type ladder__name__iendswith: str
        :param ladder__name__iregex: ladder__name__iregex
        :type ladder__name__iregex: str
        :param ladder__name__regex: ladder__name__regex
        :type ladder__name__regex: str
        :param ladder__difficulty: ladder__difficulty
        :type ladder__difficulty: str
        :param ladder__difficulty__iexact: ladder__difficulty__iexact
        :type ladder__difficulty__iexact: str
        :param ladder__difficulty__contains: ladder__difficulty__contains
        :type ladder__difficulty__contains: str
        :param ladder__difficulty__icontains: ladder__difficulty__icontains
        :type ladder__difficulty__icontains: str
        :param ladder__difficulty__istartswith: ladder__difficulty__istartswith
        :type ladder__difficulty__istartswith: str
        :param ladder__difficulty__startswith: ladder__difficulty__startswith
        :type ladder__difficulty__startswith: str
        :param ladder__difficulty__endswith: ladder__difficulty__endswith
        :type ladder__difficulty__endswith: str
        :param ladder__difficulty__iendswith: ladder__difficulty__iendswith
        :type ladder__difficulty__iendswith: str
        :param ladder__difficulty__iregex: ladder__difficulty__iregex
        :type ladder__difficulty__iregex: str
        :param ladder__difficulty__regex: ladder__difficulty__regex
        :type ladder__difficulty__regex: str
        :param ladder__variant__name: ladder__variant__name
        :type ladder__variant__name: str
        :param ladder__variant__name__iexact: ladder__variant__name__iexact
        :type ladder__variant__name__iexact: str
        :param ladder__variant__name__contains: ladder__variant__name__contains
        :type ladder__variant__name__contains: str
        :param ladder__variant__name__icontains: ladder__variant__name__icontains
        :type ladder__variant__name__icontains: str
        :param ladder__variant__name__istartswith: ladder__variant__name__istartswith
        :type ladder__variant__name__istartswith: str
        :param ladder__variant__name__startswith: ladder__variant__name__startswith
        :type ladder__variant__name__startswith: str
        :param ladder__variant__name__endswith: ladder__variant__name__endswith
        :type ladder__variant__name__endswith: str
        :param ladder__variant__name__iendswith: ladder__variant__name__iendswith
        :type ladder__variant__name__iendswith: str
        :param ladder__variant__name__iregex: ladder__variant__name__iregex
        :type ladder__variant__name__iregex: str
        :param ladder__variant__name__regex: ladder__variant__name__regex
        :type ladder__variant__name__regex: str
        :param ladder__is_solo: ladder__is_solo
        :type ladder__is_solo: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ladder_entries_list_serialize(
            player=player,
            player__iexact=player__iexact,
            player__contains=player__contains,
            player__icontains=player__icontains,
            player__istartswith=player__istartswith,
            player__startswith=player__startswith,
            player__endswith=player__endswith,
            player__iendswith=player__iendswith,
            player__iregex=player__iregex,
            player__regex=player__regex,
            ladder=ladder,
            ladder__name=ladder__name,
            ladder__name__iexact=ladder__name__iexact,
            ladder__name__contains=ladder__name__contains,
            ladder__name__icontains=ladder__name__icontains,
            ladder__name__istartswith=ladder__name__istartswith,
            ladder__name__startswith=ladder__name__startswith,
            ladder__name__endswith=ladder__name__endswith,
            ladder__name__iendswith=ladder__name__iendswith,
            ladder__name__iregex=ladder__name__iregex,
            ladder__name__regex=ladder__name__regex,
            ladder__difficulty=ladder__difficulty,
            ladder__difficulty__iexact=ladder__difficulty__iexact,
            ladder__difficulty__contains=ladder__difficulty__contains,
            ladder__difficulty__icontains=ladder__difficulty__icontains,
            ladder__difficulty__istartswith=ladder__difficulty__istartswith,
            ladder__difficulty__startswith=ladder__difficulty__startswith,
            ladder__difficulty__endswith=ladder__difficulty__endswith,
            ladder__difficulty__iendswith=ladder__difficulty__iendswith,
            ladder__difficulty__iregex=ladder__difficulty__iregex,
            ladder__difficulty__regex=ladder__difficulty__regex,
            ladder__variant__name=ladder__variant__name,
            ladder__variant__name__iexact=ladder__variant__name__iexact,
            ladder__variant__name__contains=ladder__variant__name__contains,
            ladder__variant__name__icontains=ladder__variant__name__icontains,
            ladder__variant__name__istartswith=ladder__variant__name__istartswith,
            ladder__variant__name__startswith=ladder__variant__name__startswith,
            ladder__variant__name__endswith=ladder__variant__name__endswith,
            ladder__variant__name__iendswith=ladder__variant__name__iendswith,
            ladder__variant__name__iregex=ladder__variant__name__iregex,
            ladder__variant__name__regex=ladder__variant__name__regex,
            ladder__is_solo=ladder__is_solo,
            ordering=ordering,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LadderEntriesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ladder_entries_list_without_preload_content(
        self,
        player: Annotated[Optional[StrictStr], Field(description="player")] = None,
        player__iexact: Annotated[Optional[StrictStr], Field(description="player__iexact")] = None,
        player__contains: Annotated[Optional[StrictStr], Field(description="player__contains")] = None,
        player__icontains: Annotated[Optional[StrictStr], Field(description="player__icontains")] = None,
        player__istartswith: Annotated[Optional[StrictStr], Field(description="player__istartswith")] = None,
        player__startswith: Annotated[Optional[StrictStr], Field(description="player__startswith")] = None,
        player__endswith: Annotated[Optional[StrictStr], Field(description="player__endswith")] = None,
        player__iendswith: Annotated[Optional[StrictStr], Field(description="player__iendswith")] = None,
        player__iregex: Annotated[Optional[StrictStr], Field(description="player__iregex")] = None,
        player__regex: Annotated[Optional[StrictStr], Field(description="player__regex")] = None,
        ladder: Annotated[Optional[StrictStr], Field(description="ladder")] = None,
        ladder__name: Annotated[Optional[StrictStr], Field(description="ladder__name")] = None,
        ladder__name__iexact: Annotated[Optional[StrictStr], Field(description="ladder__name__iexact")] = None,
        ladder__name__contains: Annotated[Optional[StrictStr], Field(description="ladder__name__contains")] = None,
        ladder__name__icontains: Annotated[Optional[StrictStr], Field(description="ladder__name__icontains")] = None,
        ladder__name__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__name__istartswith")] = None,
        ladder__name__startswith: Annotated[Optional[StrictStr], Field(description="ladder__name__startswith")] = None,
        ladder__name__endswith: Annotated[Optional[StrictStr], Field(description="ladder__name__endswith")] = None,
        ladder__name__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__name__iendswith")] = None,
        ladder__name__iregex: Annotated[Optional[StrictStr], Field(description="ladder__name__iregex")] = None,
        ladder__name__regex: Annotated[Optional[StrictStr], Field(description="ladder__name__regex")] = None,
        ladder__difficulty: Annotated[Optional[StrictStr], Field(description="ladder__difficulty")] = None,
        ladder__difficulty__iexact: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iexact")] = None,
        ladder__difficulty__contains: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__contains")] = None,
        ladder__difficulty__icontains: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__icontains")] = None,
        ladder__difficulty__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__istartswith")] = None,
        ladder__difficulty__startswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__startswith")] = None,
        ladder__difficulty__endswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__endswith")] = None,
        ladder__difficulty__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iendswith")] = None,
        ladder__difficulty__iregex: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__iregex")] = None,
        ladder__difficulty__regex: Annotated[Optional[StrictStr], Field(description="ladder__difficulty__regex")] = None,
        ladder__variant__name: Annotated[Optional[StrictStr], Field(description="ladder__variant__name")] = None,
        ladder__variant__name__iexact: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iexact")] = None,
        ladder__variant__name__contains: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__contains")] = None,
        ladder__variant__name__icontains: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__icontains")] = None,
        ladder__variant__name__istartswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__istartswith")] = None,
        ladder__variant__name__startswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__startswith")] = None,
        ladder__variant__name__endswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__endswith")] = None,
        ladder__variant__name__iendswith: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iendswith")] = None,
        ladder__variant__name__iregex: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__iregex")] = None,
        ladder__variant__name__regex: Annotated[Optional[StrictStr], Field(description="ladder__variant__name__regex")] = None,
        ladder__is_solo: Annotated[Optional[StrictStr], Field(description="ladder__is_solo")] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ladder_entries_list

        LadderEntry API

        :param player: player
        :type player: str
        :param player__iexact: player__iexact
        :type player__iexact: str
        :param player__contains: player__contains
        :type player__contains: str
        :param player__icontains: player__icontains
        :type player__icontains: str
        :param player__istartswith: player__istartswith
        :type player__istartswith: str
        :param player__startswith: player__startswith
        :type player__startswith: str
        :param player__endswith: player__endswith
        :type player__endswith: str
        :param player__iendswith: player__iendswith
        :type player__iendswith: str
        :param player__iregex: player__iregex
        :type player__iregex: str
        :param player__regex: player__regex
        :type player__regex: str
        :param ladder: ladder
        :type ladder: str
        :param ladder__name: ladder__name
        :type ladder__name: str
        :param ladder__name__iexact: ladder__name__iexact
        :type ladder__name__iexact: str
        :param ladder__name__contains: ladder__name__contains
        :type ladder__name__contains: str
        :param ladder__name__icontains: ladder__name__icontains
        :type ladder__name__icontains: str
        :param ladder__name__istartswith: ladder__name__istartswith
        :type ladder__name__istartswith: str
        :param ladder__name__startswith: ladder__name__startswith
        :type ladder__name__startswith: str
        :param ladder__name__endswith: ladder__name__endswith
        :type ladder__name__endswith: str
        :param ladder__name__iendswith: ladder__name__iendswith
        :type ladder__name__iendswith: str
        :param ladder__name__iregex: ladder__name__iregex
        :type ladder__name__iregex: str
        :param ladder__name__regex: ladder__name__regex
        :type ladder__name__regex: str
        :param ladder__difficulty: ladder__difficulty
        :type ladder__difficulty: str
        :param ladder__difficulty__iexact: ladder__difficulty__iexact
        :type ladder__difficulty__iexact: str
        :param ladder__difficulty__contains: ladder__difficulty__contains
        :type ladder__difficulty__contains: str
        :param ladder__difficulty__icontains: ladder__difficulty__icontains
        :type ladder__difficulty__icontains: str
        :param ladder__difficulty__istartswith: ladder__difficulty__istartswith
        :type ladder__difficulty__istartswith: str
        :param ladder__difficulty__startswith: ladder__difficulty__startswith
        :type ladder__difficulty__startswith: str
        :param ladder__difficulty__endswith: ladder__difficulty__endswith
        :type ladder__difficulty__endswith: str
        :param ladder__difficulty__iendswith: ladder__difficulty__iendswith
        :type ladder__difficulty__iendswith: str
        :param ladder__difficulty__iregex: ladder__difficulty__iregex
        :type ladder__difficulty__iregex: str
        :param ladder__difficulty__regex: ladder__difficulty__regex
        :type ladder__difficulty__regex: str
        :param ladder__variant__name: ladder__variant__name
        :type ladder__variant__name: str
        :param ladder__variant__name__iexact: ladder__variant__name__iexact
        :type ladder__variant__name__iexact: str
        :param ladder__variant__name__contains: ladder__variant__name__contains
        :type ladder__variant__name__contains: str
        :param ladder__variant__name__icontains: ladder__variant__name__icontains
        :type ladder__variant__name__icontains: str
        :param ladder__variant__name__istartswith: ladder__variant__name__istartswith
        :type ladder__variant__name__istartswith: str
        :param ladder__variant__name__startswith: ladder__variant__name__startswith
        :type ladder__variant__name__startswith: str
        :param ladder__variant__name__endswith: ladder__variant__name__endswith
        :type ladder__variant__name__endswith: str
        :param ladder__variant__name__iendswith: ladder__variant__name__iendswith
        :type ladder__variant__name__iendswith: str
        :param ladder__variant__name__iregex: ladder__variant__name__iregex
        :type ladder__variant__name__iregex: str
        :param ladder__variant__name__regex: ladder__variant__name__regex
        :type ladder__variant__name__regex: str
        :param ladder__is_solo: ladder__is_solo
        :type ladder__is_solo: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ladder_entries_list_serialize(
            player=player,
            player__iexact=player__iexact,
            player__contains=player__contains,
            player__icontains=player__icontains,
            player__istartswith=player__istartswith,
            player__startswith=player__startswith,
            player__endswith=player__endswith,
            player__iendswith=player__iendswith,
            player__iregex=player__iregex,
            player__regex=player__regex,
            ladder=ladder,
            ladder__name=ladder__name,
            ladder__name__iexact=ladder__name__iexact,
            ladder__name__contains=ladder__name__contains,
            ladder__name__icontains=ladder__name__icontains,
            ladder__name__istartswith=ladder__name__istartswith,
            ladder__name__startswith=ladder__name__startswith,
            ladder__name__endswith=ladder__name__endswith,
            ladder__name__iendswith=ladder__name__iendswith,
            ladder__name__iregex=ladder__name__iregex,
            ladder__name__regex=ladder__name__regex,
            ladder__difficulty=ladder__difficulty,
            ladder__difficulty__iexact=ladder__difficulty__iexact,
            ladder__difficulty__contains=ladder__difficulty__contains,
            ladder__difficulty__icontains=ladder__difficulty__icontains,
            ladder__difficulty__istartswith=ladder__difficulty__istartswith,
            ladder__difficulty__startswith=ladder__difficulty__startswith,
            ladder__difficulty__endswith=ladder__difficulty__endswith,
            ladder__difficulty__iendswith=ladder__difficulty__iendswith,
            ladder__difficulty__iregex=ladder__difficulty__iregex,
            ladder__difficulty__regex=ladder__difficulty__regex,
            ladder__variant__name=ladder__variant__name,
            ladder__variant__name__iexact=ladder__variant__name__iexact,
            ladder__variant__name__contains=ladder__variant__name__contains,
            ladder__variant__name__icontains=ladder__variant__name__icontains,
            ladder__variant__name__istartswith=ladder__variant__name__istartswith,
            ladder__variant__name__startswith=ladder__variant__name__startswith,
            ladder__variant__name__endswith=ladder__variant__name__endswith,
            ladder__variant__name__iendswith=ladder__variant__name__iendswith,
            ladder__variant__name__iregex=ladder__variant__name__iregex,
            ladder__variant__name__regex=ladder__variant__name__regex,
            ladder__is_solo=ladder__is_solo,
            ordering=ordering,
            page=page,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LadderEntriesList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ladder_entries_list_serialize(
        self,
        player,
        player__iexact,
        player__contains,
        player__icontains,
        player__istartswith,
        player__startswith,
        player__endswith,
        player__iendswith,
        player__iregex,
        player__regex,
        ladder,
        ladder__name,
        ladder__name__iexact,
        ladder__name__contains,
        ladder__name__icontains,
        ladder__name__istartswith,
        ladder__name__startswith,
        ladder__name__endswith,
        ladder__name__iendswith,
        ladder__name__iregex,
        ladder__name__regex,
        ladder__difficulty,
        ladder__difficulty__iexact,
        ladder__difficulty__contains,
        ladder__difficulty__icontains,
        ladder__difficulty__istartswith,
        ladder__difficulty__startswith,
        ladder__difficulty__endswith,
        ladder__difficulty__iendswith,
        ladder__difficulty__iregex,
        ladder__difficulty__regex,
        ladder__variant__name,
        ladder__variant__name__iexact,
        ladder__variant__name__contains,
        ladder__variant__name__icontains,
        ladder__variant__name__istartswith,
        ladder__variant__name__startswith,
        ladder__variant__name__endswith,
        ladder__variant__name__iendswith,
        ladder__variant__name__iregex,
        ladder__variant__name__regex,
        ladder__is_solo,
        ordering,
        page,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if player is not None:
            
            _query_params.append(('player', player))
            
        if player__iexact is not None:
            
            _query_params.append(('player__iexact', player__iexact))
            
        if player__contains is not None:
            
            _query_params.append(('player__contains', player__contains))
            
        if player__icontains is not None:
            
            _query_params.append(('player__icontains', player__icontains))
            
        if player__istartswith is not None:
            
            _query_params.append(('player__istartswith', player__istartswith))
            
        if player__startswith is not None:
            
            _query_params.append(('player__startswith', player__startswith))
            
        if player__endswith is not None:
            
            _query_params.append(('player__endswith', player__endswith))
            
        if player__iendswith is not None:
            
            _query_params.append(('player__iendswith', player__iendswith))
            
        if player__iregex is not None:
            
            _query_params.append(('player__iregex', player__iregex))
            
        if player__regex is not None:
            
            _query_params.append(('player__regex', player__regex))
            
        if ladder is not None:
            
            _query_params.append(('ladder', ladder))
            
        if ladder__name is not None:
            
            _query_params.append(('ladder__name', ladder__name))
            
        if ladder__name__iexact is not None:
            
            _query_params.append(('ladder__name__iexact', ladder__name__iexact))
            
        if ladder__name__contains is not None:
            
            _query_params.append(('ladder__name__contains', ladder__name__contains))
            
        if ladder__name__icontains is not None:
            
            _query_params.append(('ladder__name__icontains', ladder__name__icontains))
            
        if ladder__name__istartswith is not None:
            
            _query_params.append(('ladder__name__istartswith', ladder__name__istartswith))
            
        if ladder__name__startswith is not None:
            
            _query_params.append(('ladder__name__startswith', ladder__name__startswith))
            
        if ladder__name__endswith is not None:
            
            _query_params.append(('ladder__name__endswith', ladder__name__endswith))
            
        if ladder__name__iendswith is not None:
            
            _query_params.append(('ladder__name__iendswith', ladder__name__iendswith))
            
        if ladder__name__iregex is not None:
            
            _query_params.append(('ladder__name__iregex', ladder__name__iregex))
            
        if ladder__name__regex is not None:
            
            _query_params.append(('ladder__name__regex', ladder__name__regex))
            
        if ladder__difficulty is not None:
            
            _query_params.append(('ladder__difficulty', ladder__difficulty))
            
        if ladder__difficulty__iexact is not None:
            
            _query_params.append(('ladder__difficulty__iexact', ladder__difficulty__iexact))
            
        if ladder__difficulty__contains is not None:
            
            _query_params.append(('ladder__difficulty__contains', ladder__difficulty__contains))
            
        if ladder__difficulty__icontains is not None:
            
            _query_params.append(('ladder__difficulty__icontains', ladder__difficulty__icontains))
            
        if ladder__difficulty__istartswith is not None:
            
            _query_params.append(('ladder__difficulty__istartswith', ladder__difficulty__istartswith))
            
        if ladder__difficulty__startswith is not None:
            
            _query_params.append(('ladder__difficulty__startswith', ladder__difficulty__startswith))
            
        if ladder__difficulty__endswith is not None:
            
            _query_params.append(('ladder__difficulty__endswith', ladder__difficulty__endswith))
            
        if ladder__difficulty__iendswith is not None:
            
            _query_params.append(('ladder__difficulty__iendswith', ladder__difficulty__iendswith))
            
        if ladder__difficulty__iregex is not None:
            
            _query_params.append(('ladder__difficulty__iregex', ladder__difficulty__iregex))
            
        if ladder__difficulty__regex is not None:
            
            _query_params.append(('ladder__difficulty__regex', ladder__difficulty__regex))
            
        if ladder__variant__name is not None:
            
            _query_params.append(('ladder__variant__name', ladder__variant__name))
            
        if ladder__variant__name__iexact is not None:
            
            _query_params.append(('ladder__variant__name__iexact', ladder__variant__name__iexact))
            
        if ladder__variant__name__contains is not None:
            
            _query_params.append(('ladder__variant__name__contains', ladder__variant__name__contains))
            
        if ladder__variant__name__icontains is not None:
            
            _query_params.append(('ladder__variant__name__icontains', ladder__variant__name__icontains))
            
        if ladder__variant__name__istartswith is not None:
            
            _query_params.append(('ladder__variant__name__istartswith', ladder__variant__name__istartswith))
            
        if ladder__variant__name__startswith is not None:
            
            _query_params.append(('ladder__variant__name__startswith', ladder__variant__name__startswith))
            
        if ladder__variant__name__endswith is not None:
            
            _query_params.append(('ladder__variant__name__endswith', ladder__variant__name__endswith))
            
        if ladder__variant__name__iendswith is not None:
            
            _query_params.append(('ladder__variant__name__iendswith', ladder__variant__name__iendswith))
            
        if ladder__variant__name__iregex is not None:
            
            _query_params.append(('ladder__variant__name__iregex', ladder__variant__name__iregex))
            
        if ladder__variant__name__regex is not None:
            
            _query_params.append(('ladder__variant__name__regex', ladder__variant__name__regex))
            
        if ladder__is_solo is not None:
            
            _query_params.append(('ladder__is_solo', ladder__is_solo))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ladder-entries/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ladder_entries_read(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this ladder entry.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LadderEntry:
        """ladder_entries_read

        LadderEntry API

        :param id: A unique integer value identifying this ladder entry. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ladder_entries_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LadderEntry",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ladder_entries_read_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this ladder entry.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LadderEntry]:
        """ladder_entries_read

        LadderEntry API

        :param id: A unique integer value identifying this ladder entry. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ladder_entries_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LadderEntry",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ladder_entries_read_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="A unique integer value identifying this ladder entry.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """ladder_entries_read

        LadderEntry API

        :param id: A unique integer value identifying this ladder entry. (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ladder_entries_read_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LadderEntry",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ladder_entries_read_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ladder-entries/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


